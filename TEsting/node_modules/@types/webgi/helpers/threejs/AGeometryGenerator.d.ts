import { BufferGeometry } from 'three';
import { UiObjectConfig } from 'webgi/interfaces';
export interface GeometryGenerator<T = any> {
    generate(g?: BufferGeometry, parameters?: T): BufferGeometry;
    createUiConfig?(geometry: BufferGeometry): UiObjectConfig[];
}
export declare function updateUi(geometry: BufferGeometry, childrenUi: () => UiObjectConfig[]): void;
export declare abstract class AGeometryGenerator<Tp = any> implements GeometryGenerator<Tp> {
    type: string;
    constructor(type: string);
    abstract defaultParams: Tp;
    createUiConfig(geometry: BufferGeometry): UiObjectConfig[];
    protected abstract _generateData(params: Tp): {
        indices: number[];
        vertices: number[];
        normals: number[];
        uvs: number[];
        groups?: {
            start: number;
            count: number;
            materialIndex: number;
        }[];
    };
    generate(g?: BufferGeometry, parameters?: Partial<Tp>): BufferGeometry;
}
//# sourceMappingURL=AGeometryGenerator.d.ts.map