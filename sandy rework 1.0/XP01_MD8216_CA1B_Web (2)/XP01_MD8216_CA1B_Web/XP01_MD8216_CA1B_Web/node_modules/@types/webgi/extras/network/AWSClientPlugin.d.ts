import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { AwsClient } from 'aws4fetch';
import { UiObjectConfig } from 'webgi/interfaces';
import { FileTransferPlugin } from 'webgi/plugins/FileTransferPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
/**
 * AWSClientPlugin
 * Provides `fetch` function that performs a fetch request with AWS v4 signing.
 * This is useful for connecting to AWS services like S3 directly from the client.
 * It also interfaces with the {@link FileTransferPlugin} to directly upload file when exported with the viewer or the plugin.
 * Note: Make sure to use keys with limited privileges and correct CORS settings.
 * All the keys will be stored in plain text in the vjson/glb when saved if `serializeSettings` is set to true
 */
export declare class AWSClientPlugin extends AViewerPlugin<'fileUpload'> {
    static readonly PluginType = "AWSClientPlugin1";
    uiConfig?: UiObjectConfig;
    enabled: boolean;
    private _connected;
    private _client;
    dependencies: (typeof FileTransferPlugin)[];
    constructor();
    accessKeyId: string;
    accessKeySecret: string;
    endpointURL: string;
    pathPrefix: string;
    serializeSettings: boolean;
    toggleConnection: () => void;
    /**
     * Set to true to use a proxy for all requests.
     * This can be used to move the access credentials to the server side.
     * This is required for some services like cloudflare R2 that do not support CORS.
     * usage: `AWSClientPlugin.USE_PROXY = true`, optionally set `AWSClientPlugin.PROXY_URL` to a custom proxy.
     */
    static USE_PROXY: boolean;
    static PROXY_URL: string;
    connect(): void;
    refreshUi(): void;
    disconnect(): void;
    get connected(): boolean;
    get client(): AwsClient | undefined;
    readonly serializeWithViewer = false;
    toJSON(meta?: any): any;
    onAdded(viewer: ViewerApp): Promise<void>;
    fetchFunction: typeof fetch;
    fetch(input: RequestInfo, init: RequestInit, onProgress?: (d: {
        state?: string;
        progress?: number;
    }) => void): Promise<Response>;
}
export type AwsRequestInit = RequestInit & {
    aws?: {
        accessKeyId?: string | undefined;
        secretAccessKey?: string | undefined;
        sessionToken?: string | undefined;
        service?: string | undefined;
        region?: string | undefined;
        cache?: Map<string, ArrayBuffer> | undefined;
        datetime?: string | undefined;
        signQuery?: boolean | undefined;
        appendSessionToken?: boolean | undefined;
        allHeaders?: boolean | undefined;
        singleEncode?: boolean | undefined;
    } | undefined;
};
export declare function sign2(client: AwsClient, input: RequestInfo, init?: AwsRequestInit): Promise<RequestInit & {
    aws?: {
        accessKeyId?: string | undefined;
        secretAccessKey?: string | undefined;
        sessionToken?: string | undefined;
        service?: string | undefined;
        region?: string | undefined;
        cache?: Map<string, ArrayBuffer> | undefined;
        datetime?: string | undefined;
        signQuery?: boolean | undefined;
        appendSessionToken?: boolean | undefined;
        allHeaders?: boolean | undefined;
        singleEncode?: boolean | undefined;
    } | undefined;
} & {
    method: string;
    url: URL;
    headers: Headers;
    body?: BodyInit | null | undefined;
}>;
export declare const supportsRequestStreams: boolean;
//# sourceMappingURL=AWSClientPlugin.d.ts.map