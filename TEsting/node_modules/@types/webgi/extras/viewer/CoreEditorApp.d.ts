import { IViewerAppOptions, ViewerApp } from 'webgi/viewer/ViewerApp';
import { Class } from 'ts-browser-helpers';
import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
/**
 * ViewerApp with editor UI and plugins
 * @example
 * ```typescript
 * const editor = new CoreEditorApp({canvas: document.getElementById('mcanvas')})
 *
 * // add default editor plugins
 * await addEditorPlugins(editor, {caching: true, ground: true, bloom: true, depthTonemap: true, enableDrop: false, importPopup: false, debug: false})
 *
 * // custom plugins(optional)
 * editor.addPlugin(CustomPlugin)
 * editor.addPlugin(CustomPlugin2)
 * const uiPlugin = editor.getPlugin(TweakpaneUiPlugin)
 * uiPlugin.setupPluginUi(CustomPlugin)
 * uiPlugin.setupPluginUi(CustomPlugin2)
 *
 * // setup ui
 * await editor.setupUi({
 *     'Picking': [CustomPlugin],
 *     'Custom Tab': [CustomPlugin2],
 * })
 * ```
 */
export declare class CoreEditorApp extends ViewerApp {
    get editorInitialized(): boolean;
    private _editorInitialized;
    constructor(options: IViewerAppOptions);
    defaultModes: {
        title: string;
        plugins: Class<AViewerPlugin<any>>[];
        div?: HTMLDivElement;
    }[];
    setupUi(plugins?: Record<string, Class<AViewerPlugin<any>>[]>, modes?: {
        title: string;
        plugins: Class<AViewerPlugin<any>>[];
        div?: HTMLDivElement;
    }[]): Promise<void>;
}
export declare function addEditorPlugins(viewer: ViewerApp, { debug, ground, bloom, depthTonemap, importPopup, caching, presetLibrary, switchNode, materialConfigurator }: {
    debug?: boolean | undefined;
    ground?: boolean | undefined;
    bloom?: boolean | undefined;
    depthTonemap?: boolean | undefined;
    importPopup?: boolean | undefined;
    caching?: boolean | undefined;
    presetLibrary?: boolean | undefined;
    switchNode?: boolean | undefined;
    materialConfigurator?: boolean | undefined;
}): Promise<ViewerApp>;
//# sourceMappingURL=CoreEditorApp.d.ts.map