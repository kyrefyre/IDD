import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { IAnimationObject, TUpdaterType } from 'webgi/extras/animationObject';
import { AnimationOptions } from 'popmotion';
import { EasingFunctionType } from 'webgi/helpers/animation';
import { IUiConfigContainer, UiObjectType } from 'webgi/interfaces';
import { ValOrFunc } from 'ts-browser-helpers';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export declare class AnimationObjectPlugin extends AViewerPlugin<''> {
    static readonly PluginType = "AnimationObjectPlugin";
    enabled: boolean;
    animation: AnimationObject;
    uiConfig: import("webgi/interfaces").UiObjectConfig<any, string>;
    onAdded(viewer: ViewerApp): Promise<void>;
}
export declare class AnimationObject<V = any> implements IAnimationObject<V>, IUiConfigContainer {
    target: ValOrFunc<ViewerApp | undefined>;
    uuid: string;
    name: string;
    access: string;
    from?: V;
    to?: V;
    options: AnimationOptions<V>;
    duration: number;
    delay: number;
    repeat: number;
    repeatType: 'loop' | 'reverse' | 'mirror';
    ease: EasingFunctionType;
    updater: TUpdaterType[];
    uiObjectType?: UiObjectType;
    targetObject?: Record<string, any>;
    updateScene: boolean;
    updateCamera: boolean;
    updateViewer: boolean;
    constructor(target: ValOrFunc<ViewerApp | undefined>);
    protected _onAccessChanged(): void;
    refreshUi(): void;
    parent?: AnimationObject;
    add(o: AnimationObject): void;
    remove(o: AnimationObject): void;
    animate(reverse?: boolean): Promise<void>;
    animateReverse(): Promise<void>;
    removeFromParent2(): Promise<void>;
    removeFromParent(): void;
    animSetParallel: boolean;
    animSet: AnimationObject[];
    addAnimation(): void;
    uiConfig: import("webgi/interfaces").UiObjectConfig<any, string>;
}
//# sourceMappingURL=AnimationObjectPlugin.d.ts.map