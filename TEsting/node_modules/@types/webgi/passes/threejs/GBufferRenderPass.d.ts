import { Color, Material, WebGLMultipleRenderTargets, WebGLRenderer, WebGLRenderTarget } from 'three';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
export declare class GBufferRenderPass<T extends WebGLMultipleRenderTargets | WebGLRenderTarget> extends RenderPass {
    target: T;
    private _transparentMats;
    private _transmissiveMats;
    constructor(target: T, material: Material, clearColor?: Color, clearAlpha?: number);
    /**
     * Renders to this.target
     * @param renderer
     * @param writeBuffer - this is ignored
     * @param readBuffer - this is ignored
     * @param deltaTime
     * @param maskActive
     */
    render(renderer: WebGLRenderer, writeBuffer: WebGLMultipleRenderTargets | WebGLRenderTarget | null, readBuffer?: WebGLMultipleRenderTargets | WebGLRenderTarget, deltaTime?: number, maskActive?: boolean): void;
}
//# sourceMappingURL=GBufferRenderPass.d.ts.map